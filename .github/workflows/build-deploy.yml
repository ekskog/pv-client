name: Build and Deploy photovault-client

on:
  push:
    paths:
      - 'src/**'
      - 'k8s/**'
      - '.github/workflows/**'
      - 'Dockerfile'
      - 'package.json'
      - 'package-lock.json'
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ghcr.io/ekskog/photovault-client
      NAMESPACE: photovault
      DEPLOYMENT: photovault-client

    steps:

    - name: Debug Turnstile secret
      run: |
        echo "Length of Turnstile key: ${#VITE_TURNSTILE_SITE_KEY}"
      env:
        VITE_TURNSTILE_SITE_KEY: ${{ secrets.TURNSTILE_SITE_KEY }}

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract short SHA
      id: vars
      run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.EK_GITHUB_PAT }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        build-args: |
          VITE_TURNSTILE_SITE_KEY=${{ secrets.VITE_TURNSTILE_SITE_KEY }}
        tags: |
          ${{ env.IMAGE_NAME }}:${{ env.SHORT_SHA }}

    - name: Decode and write kubeconfig
      run: |
        echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig.yaml

    - name: Set KUBECONFIG env var
      run: echo "KUBECONFIG=$GITHUB_WORKSPACE/kubeconfig.yaml" >> $GITHUB_ENV

    - name: Update Deployment image
      run: |
        # Always update to the SHA tag
        kubectl set image deployment/${{ env.DEPLOYMENT }} \
          photovault-client=${{ env.IMAGE_NAME }}:${{ env.SHORT_SHA }} \
          --namespace=${{ env.NAMESPACE }}
        kubectl rollout status deployment/${{ env.DEPLOYMENT }} --namespace=${{ env.NAMESPACE }}

    - name: Apply manifests (if k8s files changed)
      if: contains(join(github.event.commits.*.modified), 'k8s/')
      run: |
        kubectl apply -f k8s/
